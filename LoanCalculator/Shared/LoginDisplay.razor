@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavManager

<AuthorizeView>
    <Authorized>

        @*<a href="Identity/Account/Manage">Hello, @FName!</a>*@
        <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <a class="link-nav" href="Identity/Account/Register">Register</a>
        <a class="link-nav" href="Identity/Account/Login">Log in</a>
        <a class="link-nav" @onclick="DemoUser">Login w/ Demo</a>
    </NotAuthorized>
</AuthorizeView>


@code{
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    private System.Security.Claims.ClaimsPrincipal principal;
    [Parameter]
    public string FName { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        //if (authState != null)
        //{
        //    principal = (await authState).User;
        //    ApplicationUser currentUser = await UserManager.GetUserAsync(principal) as ApplicationUser;
        //    if (currentUser != null)
        //    {
        //        FName = currentUser.FName;
        //    }

        //}

    }

    private async Task DemoUser()
    {
        string email = "demo@demo.com";
        string pswd = "Demo123!";
        var usr = await UserManager.FindByEmailAsync(email);
        if(usr is null)
        {
            return;
        }
        if(await SignInManager.CanSignInAsync(usr))
        {
            var result = await SignInManager.CheckPasswordSignInAsync(usr, pswd, true);
            if(result == SignInResult.Success)
            {
                Guid key = Guid.NewGuid();
                BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Email = email, Password = pswd };
                NavManager.NavigateTo($"/login?key={key}", true);
            }
        }

    }

}